# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import stragegy_pb2 as stragegy__pb2


class StragegyStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetStragegy = channel.unary_unary(
        '/Stragegy/GetStragegy',
        request_serializer=stragegy__pb2.GetRequest.SerializeToString,
        response_deserializer=stragegy__pb2.GetReply.FromString,
        )


class StragegyServicer(object):
  """The greeting service definition.
  """

  def GetStragegy(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StragegyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetStragegy': grpc.unary_unary_rpc_method_handler(
          servicer.GetStragegy,
          request_deserializer=stragegy__pb2.GetRequest.FromString,
          response_serializer=stragegy__pb2.GetReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Stragegy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
